// kernel: a function in computeShader
#pragma kernel ExternalGravity // 0
#pragma kernel UpdatePositions // 1
#pragma kernel calcDensity // 2
#pragma kernel calcPressureForce // 3
#pragma kernel calcViscosityForce // 4
#pragma kernel UpdateSpatialHash // 5
#pragma kernel calcDensityTexture // 6


#include "./SmoothingKernel.hlsl"
#include "./SpatialHash.hlsl"

struct Particle
{
    float3 position;
    float3 velocity;
    float3 predictPosition;
    float density;
    float nearDensity;
};


RWStructuredBuffer<Particle> _ParticleBuffer;
const uint numParticles;

RWStructuredBuffer<uint3> _SpatialLookupBuffer;
RWStructuredBuffer<uint> _startIndicesBuffer;
RWTexture3D<float> DensityTex;
const int3 DensityTexSize;

// RWStructuredBuffer<uint> _DebugBuffer;

float _DeltaTime;
const float3 _Gravity;

const float3 halfBoxScale;
const float4x4 localToWorld;
const float4x4 worldToLocal;

static const uint NumThreads = 64; 
const float mass = 1.0;
const float radius = 1.0; 
const float squaredRadius;
const float targetDensity = 1000.0; 
const float pressureMultiplier = 1; 
const float ngbPressureMultiplier = 1; 
const float viscosityStrength = 0.1; 
const float collisionDamping = 0.5; 


[numthreads(NumThreads, 1, 1)]
void ExternalGravity(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles) return;
    Particle particle = _ParticleBuffer[id.x];
    particle.velocity += _Gravity * _DeltaTime;

    // We predict here for spatial update
    particle.predictPosition = particle.position + particle.velocity * _DeltaTime;
    _ParticleBuffer[id.x] = particle;
}

void HandleBoundingBoxCollision(uint3 id : SV_DispatchThreadID) {

    Particle particle = _ParticleBuffer[id.x];
    
    // Local scale
    float3 localPos = mul(worldToLocal, float4(particle.position, 1.0)).xyz;
    float3 localVelocity = mul(worldToLocal, float4(particle.velocity, 0.0)).xyz;

    // Check for collision with the bounding box
    if (localPos.x < -halfBoxScale.x || localPos.x > halfBoxScale.x) {
        localVelocity.x = -localVelocity.x * collisionDamping; 
        localPos.x = clamp(localPos.x, -halfBoxScale.x, halfBoxScale.x);
    }

    if (localPos.y < -halfBoxScale.y || localPos.y > halfBoxScale.y) {
        localVelocity.y = -localVelocity.y * collisionDamping; 
        localPos.y = clamp(localPos.y, -halfBoxScale.y, halfBoxScale.y);
    }

    if (localPos.z < -halfBoxScale.z || localPos.z > halfBoxScale.z) {
        localVelocity.z = -localVelocity.z * collisionDamping; 
        localPos.z = clamp(localPos.z, -halfBoxScale.z, halfBoxScale.z);
    }

    // Transform back to world space
    particle.position = mul(localToWorld, float4(localPos, 1.0)).xyz;
    particle.velocity = mul(localToWorld, float4(localVelocity, 0.0)).xyz;
    _ParticleBuffer[id.x] = particle;
}

[numthreads(NumThreads, 1, 1)]
void calcDensity(uint3 id : SV_DispatchThreadID) {
    // based on formula 3
    if (id.x >= numParticles) return;
    Particle particle = _ParticleBuffer[id.x];
    int3 centerCell = PositionToCell3D(particle.predictPosition, radius);

    float density = 0.0;
    float nearDensity = 0.0;

    for (int i = 0; i<27; i++) {
        uint cellHash = HashCell3D(centerCell + inRadCellOffset[i]);
        uint cellKey = KeyFromHash(cellHash, numParticles);
        uint currIndex = _startIndicesBuffer[cellKey]; 
        while (currIndex < numParticles) {
            uint3 currParticleLookup = _SpatialLookupBuffer[currIndex++];
            if (currParticleLookup[2] != cellKey) break; 
            if (currParticleLookup[1] != cellHash) continue; 
            
            uint neighborIndex = currParticleLookup[0];
            if (neighborIndex == id.x) continue; 
            Particle otherParticle = _ParticleBuffer[neighborIndex];
            float3 diff = particle.predictPosition - otherParticle.predictPosition;
            if (dot(diff, diff) > squaredRadius) continue;

            float distance = length(diff);
            density += SpikyKernelPow2(distance, radius);
            nearDensity += SpikyKernelPow3(distance, radius);
        }
    }
    particle.density = density;
    particle.nearDensity = nearDensity;
    _ParticleBuffer[id.x] = particle;
}



[numthreads(NumThreads, 1, 1)]
void calcPressureForce(uint3 id : SV_DispatchThreadID) {
    // based on formula 10 + Near-density
    // http://www.ligum.umontreal.ca/Clavet-2005-PVFS/pvfs.pdf
    if (id.x >= numParticles) return;
    Particle particle = _ParticleBuffer[id.x];
    float density = particle.density;
    float nearDensity = particle.nearDensity;
    float pressure = (density - targetDensity) * pressureMultiplier; 
    float nearPressure = nearDensity * ngbPressureMultiplier;

    float3 pressureForce = 0.0;

    int3 centerCell = PositionToCell3D(particle.predictPosition, radius);
    for (int i = 0; i<27; i++) {
        uint cellHash = HashCell3D(centerCell + inRadCellOffset[i]);
        uint cellKey = KeyFromHash(cellHash, numParticles);
        uint currIndex = _startIndicesBuffer[cellKey]; 
        while (currIndex < numParticles) {
            uint3 currParticleLookup = _SpatialLookupBuffer[currIndex++];
            if (currParticleLookup[2] != cellKey) break; 
            if (currParticleLookup[1] != cellHash) continue; 
            
            uint neighborIndex = currParticleLookup[0];
            if (neighborIndex == id.x) continue; // Skip self
            Particle otherParticle = _ParticleBuffer[neighborIndex];
            float3 diff = particle.predictPosition - otherParticle.predictPosition;
            if (dot(diff, diff) > squaredRadius) continue;

            // InterlockedAdd(_DebugBuffer[0], 1); // Debugging: count the number of neighbors

            float distance = length(diff);
            float3 dir = distance > 0 ? normalize(diff) : float3(0.0, 1.0, 0.0);

            float ngbDensity = otherParticle.density; // pi + pj / (2 * rhoj)
            float ngbPressure = (ngbDensity - targetDensity) * pressureMultiplier;
            float sharedPressure = (pressure + ngbPressure) / 2; // (2.0 * ngbDensity);

            float ngbNearDensity = otherParticle.nearDensity; 
            float ngbNearPressure = (ngbNearDensity - targetDensity) * pressureMultiplier;
            float sharedNearPressure = (nearPressure + ngbNearPressure) / 2; // (2.0 * ngbNearDensity);

            pressureForce += dir * SpikyKernelPow2(distance, radius) * sharedPressure; // eq. 10 in SPH paper
            pressureForce += dir * SpikyKernelPow3(distance, radius) * sharedNearPressure;
        }
    }
    const float eps = 0.0001;
    float3 acceleration = pressureForce / max(eps, density); // eq. 10 in SPH paper
    particle.velocity += acceleration * _DeltaTime;
    _ParticleBuffer[id.x] = particle;
}

[numthreads(NumThreads, 1, 1)]
void calcViscosityForce(uint3 id : SV_DispatchThreadID) {
    // based on formula 14
    if (id.x >= numParticles) return;
    Particle particle = _ParticleBuffer[id.x];
    
    int3 centerCell = PositionToCell3D(particle.predictPosition, radius);

    float3 viscosityForce = 0;
    float3 velocity = particle.velocity;

    for (int i = 0; i<27; i++) {
        uint cellHash = HashCell3D(centerCell + inRadCellOffset[i]);
        uint cellKey = KeyFromHash(cellHash, numParticles);
        uint currIndex = _startIndicesBuffer[cellKey]; // starting here, key matches
        while (currIndex < numParticles) {
            // should match key and hash
            uint3 currParticleLookup = _SpatialLookupBuffer[currIndex++];
            if (currParticleLookup[2] != cellKey) break; // No more neighbors in this cell
            if (currParticleLookup[1] != cellHash) continue; // Fake neighbor :(
            
            uint neighborIndex = currParticleLookup[0];
            if (neighborIndex == id.x) continue; // Skip self
            Particle otherParticle = _ParticleBuffer[neighborIndex];
            float3 diff = particle.predictPosition - otherParticle.predictPosition;
            if (dot(diff, diff) > squaredRadius) continue; // Too far, avoid floating point 

            float distance = length(diff);
            viscosityForce += (otherParticle.velocity - velocity) * SmoothingKernelPoly6(distance, radius);
        }
    }

    particle.velocity += viscosityForce * _DeltaTime * viscosityStrength; //viscosityStrength = mu
    _ParticleBuffer[id.x] = particle;
}


[numthreads(NumThreads, 1, 1)]
void UpdatePositions(uint3 id : SV_DispatchThreadID) {
    if (id.x >= numParticles) return;
    Particle particle = _ParticleBuffer[id.x];
    particle.position += particle.velocity * _DeltaTime;
    _ParticleBuffer[id.x] = particle;
    HandleBoundingBoxCollision(id);
}

[numthreads(NumThreads, 1, 1)]
void UpdateSpatialHash(uint3 id : SV_DispatchThreadID) {
    if (id.x >= numParticles) return;

    Particle particle = _ParticleBuffer[id.x];
    _startIndicesBuffer[id.x] = numParticles; // Initialize to max value

    uint hash = HashCell3D(PositionToCell3D(particle.predictPosition, radius));
    uint cellKey = KeyFromHash(hash, numParticles);

    // Update the spatial hash table
    _SpatialLookupBuffer[id.x] = uint3(uint(id.x), hash, cellKey);

    // Sorting will be handled by GPU, see BitonicMergeSort.compute
}

void calcDensityAtPos(float3 queryPosition) {

    int3 centerCell = PositionToCell3D(queryPosition, radius);
    float density = 0.0;
    for (int i = 0; i < 27; i++) {
        uint cellHash = HashCell3D(centerCell + inRadCellOffset[i]);
        uint cellKey = KeyFromHash(cellHash, numParticles);
        uint currIndex = _startIndicesBuffer[cellKey];
        while (currIndex < numParticles) {
            uint3 currParticleLookup = _SpatialLookupBuffer[currIndex++];
            if (currParticleLookup[2] != cellKey) break; 
            if (currParticleLookup[1] != cellHash) continue; 
            
            uint particleIndex = currParticleLookup[0];
            Particle particle = _ParticleBuffer[particleIndex];
            float3 diff = queryPosition - particle.predictPosition;
            float distanceSquared = dot(diff, diff);
            
            if (distanceSquared > squaredRadius) continue; 
            float distance = sqrt(distanceSquared);
            density += SpikyKernelPow2(distance, radius);
        }
    }
    return density;
}

[numthreads(8,8,8)]
void calcDensityTexture(uint3 id : SV_DispatchThreadID) {
    if (id.x >= DensityTexSize.x ||
        id.y >= DensityTexSize.y ||
        id.z >= DensityTexSize.z) return;
    float3 texPos = id / (DensityTexSize - 1); // component-wise division
    float3 worldPos = (texPos - 0.5) * 2.0 * halfBoxScale; // scale to world space
    DensityTex[id] = calcDensityAtPos(worldPos);
}

