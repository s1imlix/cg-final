#pragma kernel MarchCube
#pragma kernel UpdateRenderArgs

#include "MarchingCubeHelpers.hlsl"

Texture3D<float> DensityTex;
RWStructuredBuffer<int> edgeLUT;
// RWStructuredBuffer<int> TriCount;
AppendStructuredBuffer<Triangle> OutputBuffer; // Assuming you have a structured buffer to store the output vertices
uint3 DensityTexSize;
const float3 localScale; // scale of the volume in world space

const float IsoValue;

SamplerState LinearClamp;

RWStructuredBuffer<int> RenderArgs; // Buffer to store render arguments, e.g., number of triangles

float3 TextureCoordToPos(uint3 coord) { 
    // TextureCoord [x, y, z] to normalized [-0.5, 0.5] range
    return (coord / (DensityTexSize - 1)) - 0.5f;
}



float SampleDensityFromTexture(int3 pos) {
    if (any(pos < 0 || pos > (int3)DensityTexSize - 1)) {
        return IsoValue; // must be painted
    }

    float3 xyz = (float3)pos / (float3)(DensityTexSize - 1);
    // https://learn.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-to-samplelevel
    // SampleLevel(tex, sampler, coord: float3)
    return DensityTex.SampleLevel(LinearClamp, xyz, 0);
}

float3 calculateNormal(int3 pos) {
    // Calculate the gradient of the density field at the given position
    // Using central difference to approximate the gradient

    float dx = SampleDensityFromTexture(pos + coordOffsets[1]) - SampleDensityFromTexture(pos - coordOffsets[1]);
    float dy = SampleDensityFromTexture(pos + coordOffsets[2]) - SampleDensityFromTexture(pos - coordOffsets[2]);
    float dz = SampleDensityFromTexture(pos + coordOffsets[3]) - SampleDensityFromTexture(pos - coordOffsets[3]);

    return normalize(float3(dx, dy, dz));
}

Vertex InterpolateVertex(int3 coordA, int3 coordB) { 
    // coord is textureCoord
    float3 v1Pos = TextureCoordToPos(coordA);
    float3 v2Pos = TextureCoordToPos(coordB);

    // Get density on two vertices, note this must assume that d1 < iso < d2
    float d1 = SampleDensityFromTexture(coordA);
    float d2 = SampleDensityFromTexture(coordB);

    // Interpolate position based on iso value
    float t = (IsoValue - d1) / (d2 - d1);
    
    Vertex v; // interpolated vertex where mesh intersects
    v.position = lerp(v1Pos, v2Pos, t) * localScale; // scale to world space

    /*
    Wiki: The gradient of the scalar field at each grid point is also the normal vector 
    of a hypothetical isosurface passing from that point. Therefore, these normals may 
    be interpolated along the edges of each cube to find the normals of the generated 
    vertices which are essential for shading the resulting mesh with some illumination model. 

    tldr: interpolate normal on v1 v2
    */
    v.normal = normalize(calculateNormal(coordA) * (1 - t) + calculateNormal(coordB) * t);
    return v;
}

[numthreads(8, 8, 8)]
void MarchCube(int3 id : SV_DispatchThreadID) {
    // Main marching cube algorithm
    /*
    id - thread id in the dispatch grid, we assign a cube to its corner 
    */

    int3 numCubes = DensityTexSize - 1; // number of cubes in each dimension
     // ensure TriCount is initialized
    if (id.x >= numCubes.x || id.y >= numCubes.y || id.z >= numCubes.z) {
        return; // edges no cube
    }
    

    int3 cubeCornerCoords[8];
    float coordDensities[8];
    for (int i = 0; i<8; i++)
    {
        cubeCornerCoords[i] = id + coordOffsets[i];
        coordDensities[i] = SampleDensityFromTexture(cubeCornerCoords[i]);
    }

    // Calculate the index of the cube in the lookup table
    int cubeConfigurationIndex = 0;
    for (int j = 0; j < 8; j++) {
        if (coordDensities[j] < IsoValue) {
            cubeConfigurationIndex |= (1 << j); // set the bit if density is below iso value
        }
    }

    int numTriangles = lengthLUT[cubeConfigurationIndex];
    int offset = offsetLUT[cubeConfigurationIndex];
    // look into edgeLUT to get the edges that each triangle intersects

    for (int k = 0; k<numTriangles; k++) {
        // For each triangle in the cube configuration, interpolate the vertices
        int2 edgeA = vertexIndexFromEdge[edgeLUT[offset + k * 3]];
        int2 edgeB = vertexIndexFromEdge[edgeLUT[offset + k * 3 + 1]];
        int2 edgeC = vertexIndexFromEdge[edgeLUT[offset + k * 3 + 2]];
        Vertex vA = InterpolateVertex(cubeCornerCoords[edgeA.x], cubeCornerCoords[edgeA.y]);
        Vertex vB = InterpolateVertex(cubeCornerCoords[edgeB.x], cubeCornerCoords[edgeB.y]);
        Vertex vC = InterpolateVertex(cubeCornerCoords[edgeC.x], cubeCornerCoords[edgeC.y]);

        Triangle tri;
        tri.vertexA = vA;
        tri.vertexB = vB;
        tri.vertexC = vC;
        OutputBuffer.Append(tri);
    }
}

[numthreads(1, 1, 1)]
void UpdateRenderArgs(uint3 id : SV_DispatchThreadID) {
    // Update the render arguments for the mesh
    RenderArgs[0] *= 3; // total number of vertices (3 per triangle)
    RenderArgs[1] = 1; // one instance of mesh
    RenderArgs[2] = 0; // no submesh
    RenderArgs[3] = 0; // base vertex 0 
    RenderArgs[4] = 0; // byte offset 0
}
