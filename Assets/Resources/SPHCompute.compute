// kernel: a function in computeShader
// defines CSMain as a kernel (kernel index = 0)
#pragma kernel CSMain 

struct Particle
{
    float3 position;
    float3 velocity;
    float3 currentForce;
    float density;
    float pressure;
};

RWStructuredBuffer<Particle> _ParticleBuffer;
float _DeltaTime;
float _Gravity[4];

[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    Particle particle = _ParticleBuffer[id.x];
    particle.velocity.x += _Gravity[0] * _DeltaTime;
    particle.velocity.y += _Gravity[1] * _DeltaTime;
    particle.velocity.z += _Gravity[2] * _DeltaTime;
    particle.position += particle.velocity * _DeltaTime;
    
    // add some bouncing shit
    
    if (particle.position.y < 0) {
        particle.position.y = 0;
        particle.velocity.y = -particle.velocity.y * 0.5; 
    }
    
    
    _ParticleBuffer[id.x] = particle;
}